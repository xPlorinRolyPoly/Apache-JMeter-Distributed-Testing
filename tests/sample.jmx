<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Sample" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="number.of.threads" elementType="Argument">
            <stringProp name="Argument.name">number.of.threads</stringProp>
            <stringProp name="Argument.value">${__P(number.of.threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.host" elementType="Argument">
            <stringProp name="Argument.name">redis.host</stringProp>
            <stringProp name="Argument.value">${__P(redis.host,127.0.0.1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.port" elementType="Argument">
            <stringProp name="Argument.name">redis.port</stringProp>
            <stringProp name="Argument.value">${__P(redis.port,6379)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.password" elementType="Argument">
            <stringProp name="Argument.name">redis.password</stringProp>
            <stringProp name="Argument.value">${__P(redis.password,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.ssl.enable" elementType="Argument">
            <stringProp name="Argument.name">redis.ssl.enable</stringProp>
            <stringProp name="Argument.value">${__P(redis.ssl.enable,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.ssl.truststore.type" elementType="Argument">
            <stringProp name="Argument.name">redis.ssl.truststore.type</stringProp>
            <stringProp name="Argument.value">${__P(redis.ssl.truststore.type,JKS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.ssl.truststore.file" elementType="Argument">
            <stringProp name="Argument.name">redis.ssl.truststore.file</stringProp>
            <stringProp name="Argument.value">${__P(redis.ssl.truststore.file,C:\Program Files\Java\jdk-11.0.17\lib\security\redis-db-ca.jks)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.ssl.truststore.password" elementType="Argument">
            <stringProp name="Argument.name">redis.ssl.truststore.password</stringProp>
            <stringProp name="Argument.value">${__P(redis.ssl.truststore.password,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="redis.key" elementType="Argument">
            <stringProp name="Argument.name">redis.key</stringProp>
            <stringProp name="Argument.value">jmeter:data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api.host" elementType="Argument">
            <stringProp name="Argument.name">api.host</stringProp>
            <stringProp name="Argument.value">${__P(api.host,httpbin.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api.protocol" elementType="Argument">
            <stringProp name="Argument.name">api.protocol</stringProp>
            <stringProp name="Argument.value">${__P(api.protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api.user.name" elementType="Argument">
            <stringProp name="Argument.name">api.user.name</stringProp>
            <stringProp name="Argument.value">${__P(api.user.name,test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api.user.password" elementType="Argument">
            <stringProp name="Argument.name">api.user.password</stringProp>
            <stringProp name="Argument.value">${__P(api.user.password,test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initialize jedis connection" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import redis.clients.jedis.Jedis
import org.apache.jmeter.util.JsseSSLManager
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocketFactory
import javax.net.ssl.SSLParameters
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection

redisHost = vars.get(&quot;redis.host&quot;)
redisPort = Integer.parseInt(vars.get(&quot;redis.port&quot;))
redisPassword = vars.get(&quot;redis.password&quot;)
redis_ssl = Boolean.parseBoolean(vars.get(&quot;redis.ssl.enable&quot;))
redis_ssl_truststore_file = vars.get(&quot;redis.ssl.truststore.file&quot;)
redis_ssl_truststore_type = vars.get(&quot;redis.ssl.truststore.type&quot;)
redis_ssl_truststore_password = vars.get(&quot;redis.ssl.truststore.password&quot;)

Jedis jedis
log.info(&quot;Redis: Connection Details: Host:${redisHost} port:${redisPort} ssl_enable: ${redis_ssl}&quot;)

if (redis_ssl) {
	if (redis_ssl_truststore_file == &apos;&apos;)  {
		JsseSSLManager sslManager = (JsseSSLManager) SSLManager.getInstance()
		SSLContext sslContext = sslManager.getContext()
		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory()
		SSLParameters sslParameters = sslContext.getDefaultSSLParameters()
		HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()
		jedis = new Jedis(redisHost, redisPort, 4000, 3000,true, sslSocketFactory, sslParameters, hostnameVerifier)
	} else {
		System.setProperty(&quot;javax.net.ssl.trustStore&quot;, redis_ssl_truststore_file)
		System.setProperty(&quot;javax.net.ssl.trustStoreType&quot;, redis_ssl_truststore_type)
		System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, redis_ssl_truststore_password)
		jedis = new Jedis(redisHost, redisPort, 4000, 3000, true)
    }
} else {
    jedis = new Jedis(redisHost, redisPort, 4000, 3000)
}

if (redisPassword !=&apos;&apos;) {
    jedis.auth(redisPassword)
}
jedis.connect()
log.info(&quot;Redis: connected! ping --&gt; &quot; + jedis.ping())
samplerName = ctx.getCurrentSampler().getName()
flushResp = jedis.flushAll()
log.info(&quot;Redis: Deleted all data - &quot; + flushResp)
jedis.disconnect()
jedis.close()
log.info(&quot;Redis: disconnected and closed!&quot;)</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group HTTP Methods" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loop.count,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${number.of.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(ramp.up.seconds,1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration.seconds,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(startup.delay.seconds,10)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get: ${request.suffix}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${api.host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${api.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/get</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.time.ZonedDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

def formatter = DateTimeFormatter.ofPattern(&quot;ddMMyyyy-HHmmssS&quot;)
def timestampNow = ZonedDateTime.now(ZoneId.of(&quot;Europe/Berlin&quot;)).format(formatter)
suffix = timestampNow + &quot;-${__Random(00000,99999)}&quot;
machineName = &quot;${__machineName()}&quot;
nodeNameList = machineName.split(&apos;-&apos;)
nodeName = nodeNameList.last()
requestSuffix = nodeName + &quot;-&quot; + suffix
vars.put(&quot;request.suffix&quot;,requestSuffix)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import redis.clients.jedis.Jedis
import org.apache.jmeter.util.JsseSSLManager
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocketFactory
import javax.net.ssl.SSLParameters
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection

redisHost = vars.get(&quot;redis.host&quot;)
redisPort = Integer.parseInt(vars.get(&quot;redis.port&quot;))
redisPassword = vars.get(&quot;redis.password&quot;)
redis_ssl = Boolean.parseBoolean(vars.get(&quot;redis.ssl.enable&quot;))
redis_ssl_truststore_file = vars.get(&quot;redis.ssl.truststore.file&quot;)
redis_ssl_truststore_type = vars.get(&quot;redis.ssl.truststore.type&quot;)
redis_ssl_truststore_password = vars.get(&quot;redis.ssl.truststore.password&quot;)

Jedis jedis
log.info(&quot;Redis: Connection Details: Host:${redisHost} port:${redisPort} ssl_enable: ${redis_ssl}&quot;)

if (redis_ssl) {
	if (redis_ssl_truststore_file == &apos;&apos;)  {
		JsseSSLManager sslManager = (JsseSSLManager) SSLManager.getInstance()
		SSLContext sslContext = sslManager.getContext()
		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory()
		SSLParameters sslParameters = sslContext.getDefaultSSLParameters()
		HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()
		jedis = new Jedis(redisHost, redisPort, 4000, 3000,true, sslSocketFactory, sslParameters, hostnameVerifier)
	} else {
		System.setProperty(&quot;javax.net.ssl.trustStore&quot;, redis_ssl_truststore_file)
		System.setProperty(&quot;javax.net.ssl.trustStoreType&quot;, redis_ssl_truststore_type)
		System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, redis_ssl_truststore_password)
		jedis = new Jedis(redisHost, redisPort, 4000, 3000, true)
    }
} else {
    jedis = new Jedis(redisHost, redisPort, 4000, 3000)
}

if (redisPassword !=&apos;&apos;) {
    jedis.auth(redisPassword)
}
jedis.connect()
log.info(&quot;Redis: connected! ping --&gt; &quot; + jedis.ping())

responseCode = ctx.getPreviousResult().getResponseCode()
responseBody = ctx.getPreviousResult().getResponseDataAsString()

log.info(&quot;Response code: ${responseCode}&quot;)

if(responseCode.equals(&quot;200&quot;)) {
	jsonSlurper = new JsonSlurper()
	response = jsonSlurper.parseText(responseBody)
	
	redisData = [
		samplerName: &quot;${__samplerName()}&quot;,
		samplerUrl: response.url,
		statusCode: responseCode
	]
	numInsert = jedis.lpush(&quot;${redis.key}&quot;, JsonOutput.toJson(redisData))
	log.info(&quot;Redis: ${numInsert}&quot;)
	if (numInsert &gt; 0) {
		log.info(&quot;Redis: Write is successful!&quot;)
	} else {
		log.info(&quot;Redis: Write is FAILED!&quot;)
	}
} else {
	log.error(&quot;Failed: Send Request&quot;)
}

jedis.disconnect()
jedis.close()
log.info(&quot;Redis: disconnected and closed!&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Expected Response code: 200 and Received response code: ${__groovy(ctx.getPreviousResult().getResponseCode())}</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group Auth" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BasicAuth: ${request.suffix}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${api.host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${api.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basic-auth/${api.user.name}/${api.user.password}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="BasicAuth" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.time.ZonedDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

def formatter = DateTimeFormatter.ofPattern(&quot;ddMMyyyy-HHmmssS&quot;)
def timestampNow = ZonedDateTime.now(ZoneId.of(&quot;Europe/Berlin&quot;)).format(formatter)
suffix = timestampNow + &quot;-${__Random(00000,99999)}&quot;
machineName = &quot;${__machineName()}&quot;
nodeNameList = machineName.split(&apos;-&apos;)
nodeName = nodeNameList.last()
requestSuffix = nodeName + &quot;-&quot; + suffix
vars.put(&quot;request.suffix&quot;,requestSuffix)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="BasicAuth" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import redis.clients.jedis.Jedis
import org.apache.jmeter.util.JsseSSLManager
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocketFactory
import javax.net.ssl.SSLParameters
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection

redisHost = vars.get(&quot;redis.host&quot;)
redisPort = Integer.parseInt(vars.get(&quot;redis.port&quot;))
redisPassword = vars.get(&quot;redis.password&quot;)
redis_ssl = Boolean.parseBoolean(vars.get(&quot;redis.ssl.enable&quot;))
redis_ssl_truststore_file = vars.get(&quot;redis.ssl.truststore.file&quot;)
redis_ssl_truststore_type = vars.get(&quot;redis.ssl.truststore.type&quot;)
redis_ssl_truststore_password = vars.get(&quot;redis.ssl.truststore.password&quot;)

Jedis jedis
log.info(&quot;Redis: Connection Details: Host:${redisHost} port:${redisPort} ssl_enable: ${redis_ssl}&quot;)

if (redis_ssl) {
	if (redis_ssl_truststore_file == &apos;&apos;)  {
		JsseSSLManager sslManager = (JsseSSLManager) SSLManager.getInstance()
		SSLContext sslContext = sslManager.getContext()
		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory()
		SSLParameters sslParameters = sslContext.getDefaultSSLParameters()
		HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()
		jedis = new Jedis(redisHost, redisPort, 4000, 3000,true, sslSocketFactory, sslParameters, hostnameVerifier)
	} else {
		System.setProperty(&quot;javax.net.ssl.trustStore&quot;, redis_ssl_truststore_file)
		System.setProperty(&quot;javax.net.ssl.trustStoreType&quot;, redis_ssl_truststore_type)
		System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, redis_ssl_truststore_password)
		jedis = new Jedis(redisHost, redisPort, 4000, 3000, true)
    }
} else {
    jedis = new Jedis(redisHost, redisPort, 4000, 3000)
}

if (redisPassword !=&apos;&apos;) {
    jedis.auth(redisPassword)
}
jedis.connect()
log.info(&quot;Redis: connected! ping --&gt; &quot; + jedis.ping())

responseCode = ctx.getPreviousResult().getResponseCode()

log.info(&quot;Response code: ${responseCode}&quot;)

if(responseCode.equals(&quot;401&quot;)) {
	redisData = [
		samplerName: &quot;${__samplerName()}&quot;,
		samplerUrl: sampler.getUrl(),
		statusCode: responseCode
	]
	numInsert = jedis.lpush(&quot;${redis.key}&quot;, JsonOutput.toJson(redisData))
	log.info(&quot;Redis: ${numInsert}&quot;)
	if (numInsert &gt; 0) {
		log.info(&quot;Redis: Write is successful!&quot;)
	} else {
		log.info(&quot;Redis: Write is FAILED!&quot;)
	}
} else {
	log.error(&quot;Failed: Send Request&quot;)
}

jedis.disconnect()
jedis.close()
log.info(&quot;Redis: disconnected and closed!&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Expected Response code: 401 and Received response code: ${__groovy(ctx.getPreviousResult().getResponseCode())}</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group Client Inspection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get IP: ${request.suffix}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${api.host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${api.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ip</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get IP" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.time.ZonedDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

def formatter = DateTimeFormatter.ofPattern(&quot;ddMMyyyy-HHmmssS&quot;)
def timestampNow = ZonedDateTime.now(ZoneId.of(&quot;Europe/Berlin&quot;)).format(formatter)
suffix = timestampNow + &quot;-${__Random(00000,99999)}&quot;
machineName = &quot;${__machineName()}&quot;
nodeNameList = machineName.split(&apos;-&apos;)
nodeName = nodeNameList.last()
requestSuffix = nodeName + &quot;-&quot; + suffix
vars.put(&quot;request.suffix&quot;,requestSuffix)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get IP" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import redis.clients.jedis.Jedis
import org.apache.jmeter.util.JsseSSLManager
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocketFactory
import javax.net.ssl.SSLParameters
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection

redisHost = vars.get(&quot;redis.host&quot;)
redisPort = Integer.parseInt(vars.get(&quot;redis.port&quot;))
redisPassword = vars.get(&quot;redis.password&quot;)
redis_ssl = Boolean.parseBoolean(vars.get(&quot;redis.ssl.enable&quot;))
redis_ssl_truststore_file = vars.get(&quot;redis.ssl.truststore.file&quot;)
redis_ssl_truststore_type = vars.get(&quot;redis.ssl.truststore.type&quot;)
redis_ssl_truststore_password = vars.get(&quot;redis.ssl.truststore.password&quot;)

Jedis jedis
log.info(&quot;Redis: Connection Details: Host:${redisHost} port:${redisPort} ssl_enable: ${redis_ssl}&quot;)

if (redis_ssl) {
	if (redis_ssl_truststore_file == &apos;&apos;)  {
		JsseSSLManager sslManager = (JsseSSLManager) SSLManager.getInstance()
		SSLContext sslContext = sslManager.getContext()
		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory()
		SSLParameters sslParameters = sslContext.getDefaultSSLParameters()
		HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()
		jedis = new Jedis(redisHost, redisPort, 4000, 3000,true, sslSocketFactory, sslParameters, hostnameVerifier)
	} else {
		System.setProperty(&quot;javax.net.ssl.trustStore&quot;, redis_ssl_truststore_file)
		System.setProperty(&quot;javax.net.ssl.trustStoreType&quot;, redis_ssl_truststore_type)
		System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, redis_ssl_truststore_password)
		jedis = new Jedis(redisHost, redisPort, 4000, 3000, true)
    }
} else {
    jedis = new Jedis(redisHost, redisPort, 4000, 3000)
}

if (redisPassword !=&apos;&apos;) {
    jedis.auth(redisPassword)
}
jedis.connect()
log.info(&quot;Redis: connected! ping --&gt; &quot; + jedis.ping())

responseCode = ctx.getPreviousResult().getResponseCode()
responseBody = ctx.getPreviousResult().getResponseDataAsString()

log.info(&quot;Response code: ${responseCode}&quot;)

if(responseCode.equals(&quot;200&quot;)) {
	redisData = [
		samplerName: &quot;${__samplerName()}&quot;,
		samplerUrl: sampler.getUrl(),
		statusCode: responseCode
	]
	numInsert = jedis.lpush(&quot;${redis.key}&quot;, JsonOutput.toJson(redisData))
	log.info(&quot;Redis: ${numInsert}&quot;)
	if (numInsert &gt; 0) {
		log.info(&quot;Redis: Write is successful!&quot;)
	} else {
		log.info(&quot;Redis: Write is FAILED!&quot;)
	}
} else {
	log.error(&quot;Failed: Send Request&quot;)
}

jedis.disconnect()
jedis.close()
log.info(&quot;Redis: disconnected and closed!&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Expected Response code: 200 and Received response code: ${__groovy(ctx.getPreviousResult().getResponseCode())}</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">200</stringProp>
        <stringProp name="ThreadGroup.delay">60</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller Connect Redis" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set up jedis connection" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import redis.clients.jedis.Jedis
import org.apache.jmeter.util.JsseSSLManager
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSocketFactory
import javax.net.ssl.SSLParameters
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection

redisHost = vars.get(&quot;redis.host&quot;)
redisPort = Integer.parseInt(vars.get(&quot;redis.port&quot;))
redisPassword = vars.get(&quot;redis.password&quot;)
redis_ssl = Boolean.parseBoolean(vars.get(&quot;redis.ssl.enable&quot;))
redis_ssl_truststore_file = vars.get(&quot;redis.ssl.truststore.file&quot;)
redis_ssl_truststore_type = vars.get(&quot;redis.ssl.truststore.type&quot;)
redis_ssl_truststore_password = vars.get(&quot;redis.ssl.truststore.password&quot;)

Jedis jedis
log.info(&quot;Redis: Connection Details: Host:${redisHost} port:${redisPort} ssl_enable: ${redis_ssl}&quot;)

if (redis_ssl) {
	if (redis_ssl_truststore_file == &apos;&apos;)  {
		JsseSSLManager sslManager = (JsseSSLManager) SSLManager.getInstance()
		SSLContext sslContext = sslManager.getContext()
		SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory()
		SSLParameters sslParameters = sslContext.getDefaultSSLParameters()
		HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()
		jedis = new Jedis(redisHost, redisPort, 4000, 3000,true, sslSocketFactory, sslParameters, hostnameVerifier)
	} else {
		System.setProperty(&quot;javax.net.ssl.trustStore&quot;, redis_ssl_truststore_file)
		System.setProperty(&quot;javax.net.ssl.trustStoreType&quot;, redis_ssl_truststore_type)
		System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, redis_ssl_truststore_password)
		jedis = new Jedis(redisHost, redisPort, 4000, 3000, true)
    }
} else {
    jedis = new Jedis(redisHost, redisPort, 4000, 3000)
}

if (redisPassword !=&apos;&apos;) {
    jedis.auth(redisPassword)
}
jedis.connect()
props.put(&quot;jedis&quot;,jedis)
log.info(&quot;Redis: connected! ping --&gt; &quot; + jedis.ping())</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller Redis Data Details" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Redis Data: ${__P(redis.sampler.name,redis.sampler.name)}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">redisSamplerName = props.get(&quot;redis.sampler.name&quot;)
log.info(&quot;Got Sampler Name: ${redisSamplerName}&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get Redis Data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import redis.clients.jedis.Jedis
import groovy.json.JsonSlurper

Jedis jedis = props.get(&quot;jedis&quot;)
redisDataCount = jedis.llen(&quot;${redis.key}&quot;)
props.put(&quot;redis.data.count&quot;, redisDataCount)
log.info(&quot;Redis: key ${redis.key} contains ${redisDataCount} record/s&quot;)

if (redisDataCount.toInteger() == 0){
	log.info(&quot;Redis: Data not found&quot;)
	jedis.disconnect()
     jedis.close()
     log.info(&quot;Redis: disconnected and closed!&quot;)
	ctx.getThread().stop()
} else {
    dataJson = jedis.rpop(&quot;${redis.key}&quot;)
    jsonSlurper = new JsonSlurper()
    dataInfo = jsonSlurper.parseText(dataJson)
    redisSamplerName = dataInfo.samplerName
    props.put(&quot;redis.sampler.name&quot;, redisSamplerName)
}

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(reports.dir,C:\Users\ALCH390\IdeaProjects\apache-jmeter-distributed-testing\results)}${__groovy(File.separator)}results-tree-report-${__time(ddMMyyyy-HHmmSS,)}-${__machineName()}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="InfluxDB Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://${__P(influxdb.hostname,127.0.0.1)}:${__P(influxdb.port,8086)}/api/v2/write?org=${__P(influxdb.organization,alps)}&amp;bucket=${__P(influxdb.bucket,jmeter)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${__P(test.runId,R-18.02-12:30)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">99;95;90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">${__P(test.name,Sample)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbToken" elementType="Argument">
              <stringProp name="Argument.name">influxdbToken</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.token,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TAG_nodeName" elementType="Argument">
              <stringProp name="Argument.name">TAG_nodeName</stringProp>
              <stringProp name="Argument.value">${__machineName()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        <stringProp name="QUEUE_SIZE">60000</stringProp>
      </BackendListener>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="InfluxDB 2.0 Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="testName" elementType="Argument">
              <stringProp name="Argument.name">testName</stringProp>
              <stringProp name="Argument.value">${__P(test.name,Sample)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="nodeName" elementType="Argument">
              <stringProp name="Argument.name">nodeName</stringProp>
              <stringProp name="Argument.value">${__machineName()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runId" elementType="Argument">
              <stringProp name="Argument.name">runId</stringProp>
              <stringProp name="Argument.value">${__P(test.runId,R-18.02-12:30)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBHttpScheme" elementType="Argument">
              <stringProp name="Argument.name">influxDBHttpScheme</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBHost" elementType="Argument">
              <stringProp name="Argument.name">influxDBHost</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.hostname,127.0.0.1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBPort" elementType="Argument">
              <stringProp name="Argument.name">influxDBPort</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.port,8086)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBToken" elementType="Argument">
              <stringProp name="Argument.name">influxDBToken</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.token,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBOrganization" elementType="Argument">
              <stringProp name="Argument.name">influxDBOrganization</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.organization,alps)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBBucket" elementType="Argument">
              <stringProp name="Argument.name">influxDBBucket</stringProp>
              <stringProp name="Argument.value">${__P(influxdb.bucket,jmeter)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersList" elementType="Argument">
              <stringProp name="Argument.name">samplersList</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="useRegexForSamplerList" elementType="Argument">
              <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="recordSubSamples" elementType="Argument">
              <stringProp name="Argument.name">recordSubSamples</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="saveResponseBodyOfFailures" elementType="Argument">
              <stringProp name="Argument.name">saveResponseBodyOfFailures</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.md.jmeter.influxdb2.visualizer.InfluxDatabaseBackendListenerClient</stringProp>
        <stringProp name="QUEUE_SIZE">60000</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
